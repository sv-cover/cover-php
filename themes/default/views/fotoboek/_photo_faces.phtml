<?php
$policy = get_policy('DataModelFotoboekFaces');

// Filter out all the faces that cannot be identified by this user (because they are not allowed to)
$faces = array_filter($iter['faces'], [$policy, 'user_can_read']);

$faces = array_map(function($face) {
	if ($face->has('lid_id'))
		return sprintf('<a href="profiel.php?lid=%d" data-face-id="%d" class="name">%s</a>',
			$face->getIter('lid')->get_id(),
			$face->get_id(),
			markup_format_text(member_full_name($face->getIter('lid'), BE_PERSONAL)));
	elseif ($face->has('custom_label'))
		return sprintf('<span class="custom-label" data-face-id="%d">%s</span>',
			$face->get_id(),
			markup_format_text($face['custom_label']));
	else
		return null; // Don't do anything with empty tags
}, $faces);

// Count the number of empty tags
$unknown_faces = count(array_filter($faces, function($face) { return $face === null; }));

if ($unknown_faces > 0)
	$faces[] = __N('%d onbekend gezicht', '%d onbekende gezichten', $unknown_faces);

$faces = array_filter($faces); // Filter out the empty tags

$current_user_can_tag = $policy->user_can_create();

if (count($faces) > 0 || $current_user_can_tag)
	printf('<p class="photo-faces" data-template-format="%s">%s%s</p>',
		markup_format_attribute(json_encode([
			'intro' => __('Een foto met %s.'),
			'unknown_sg' => __('%d onbekend gezicht'),
			'unknown_pl' => __('%d onbekende gezichten'),
			'and' => __('en')
		])),
		count($faces) > 0 ? sprintf(__('Een foto met %s.'), implode_human($faces)) : '',
		$current_user_can_tag ? '<span class="toggle tag-faces-toggle"><input id="tagging-toggle" type="checkbox"><label for="tagging-toggle">' . __('Tag gezichten') . '</label></span>' : ''
);
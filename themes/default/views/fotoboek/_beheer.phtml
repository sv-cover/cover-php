	<div class="controls">
		<?php if (get_policy($model)->user_can_create() && ctype_digit((string) $iter->get_id())): ?>
		<a href="fotoboek.php?book=<?=$iter->get_id()?>&amp;view=add_book" class="button">
			<i class="fa fa-plus"></i>
			<?= __('Nieuw fotoboek') ?>
		</a>
		<?php endif ?>
		<?php if (get_policy($model)->user_can_update($iter)): ?>
		<a href="fotoboek.php?book=<?=$iter->get_id()?>&amp;view=update_book" class="button">
			<i class="fa fa-pencil"></i>
			<?= __('Bewerk fotoboek') ?>
		</a>
		<?php endif ?>
		<?php if (get_policy($model)->user_can_update($iter)): ?>
		<a href="fotoboek.php?book=<?=$iter->get_id()?>&amp;view=add_photos" class="button">
			<i class="fa fa-picture-o"></i>
			<?= __('Foto\'s toevoegen') ?>
		</a>
		<a id="order-photos-button" class="button">
			<i class="fa fa-arrows"></i>
			<?=__("Foto's herschikken")?>
		</a>
		<a id="delete-selected-photos-button" class="button photo-selection-control" href="#">
			<i class="fa fa-trash-o"></i>
			<?=__('Geselecteerde foto\'s verwijderen')?></a>
		<?php endif ?>
	</div>
	
	<script src="<?=get_theme_data('data/wiggle.js')?>"></script>
	<script type="text/javascript">
		function sprintf(format)
		{
			for (var i = 1; i < arguments.length; ++i)
				format = format.replace(/\%d/, arguments[i]);

			return format;
		}

		$(document).ready(function() {
			var checkboxes = $('.photos .thumbnail').map(function() {
				return $('<input type="checkbox">')
					.attr('name', 'photo[]')
					.val($(this).data('id'))
					.addClass('selection-checkbox photo-edit-control')
					.appendTo(this)
					.change(function() {
						updateSelectionControls();
					}).get();
			});

			var updateSelectionControls = function() {
				$('.photo-selection-control').toggle(
					checkboxes.is(':checked'));
			};

			$('#delete-selected-photos-button').click(function(e) {
				e.preventDefault();

				var selection = checkboxes.filter(':checked').map(function() {
					return this.value;
				});

				if (!confirm(sprintf(<?=json_encode(__('Weet je zeker dat je %d geselecteerde foto\'s wilt verwijderen?'))?>, selection.length)))
					return;

				var $form = $('<form>', {
					'method': 'post',
					'action': 'fotoboek.php?book=<?=$iter->get_id()?>&view=delete_photos'
				}).appendTo(document.body);

				$.each(selection, function(i, id) {
					$('<input>', {
						'type': 'hidden',
						'name': 'photo[]',
						'value': id
					}).appendTo($form);
				});
				
				$form.submit();
			});

			updateSelectionControls();
		});

		$(document).ready(function($) {
			var $photos = $('.photos');

			var $books = $('.photobooks');

			var getPhotoId = function(el_id) {
				return el_id.match(/^photo_(\d+)$/)[1];
			};

			var getBookId = function(el_id) {
				var match = el_id.match(/^book_(\d+)$/);
				return match ? match[1] : null;
			};

			var isNotNull = function(val) {
				return val !== null;
			};

			var printError = function(response) {
				alert(<?=json_encode(__('De volgorde kon niet worden opgeslagen. De volgorde kan niet worden opgeslagen voor automatisch gegenereerde albums en albums waar je geen update-rechten voor hebt.'))?>);
			};

			var submitPhotoOrder = function() {
				$.post('fotoboek.php?book=<?=$iter->get_id()?>&view=update_photo_order', {
					'order': $photos.sortable('toArray').map(getPhotoId)
				}).fail(printError);
			};

			var submitBookOrder = function() {
				$.post('fotoboek.php?book=<?=$iter->get_id()?>&view=update_book_order', {
					'order': $books.sortable('toArray').map(getBookId).filter(isNotNull)
				}).fail(printError);
			};

			var activate = function() {
				if ($books.length) {
					$books.children().wiggle('start');

					$books.sortable({
						cursor: 'move',
						items: '> .photobook',
						update: submitBookOrder

					});
				}

				if ($photos.length) {
					$photos.children().wiggle('start');

					$photos.flowgallery('destroy');
					$photos.sortable({
						cursor: 'move',
						update: submitPhotoOrder
					});
				}
			};

			var deactivate = function() {
				if ($books.length) {
					$books.children().wiggle('stop');
					$books.sortable('destroy');
				}

				if ($photos.length) {
					$photos.children().wiggle('stop');
					$photos.flowgallery();
					$photos.sortable('destroy');
				}
			};

			$('#order-photos-button').click(function(e) {
				if ($photos.hasClass('ui-sortable') || $books.hasClass('ui-sortable'))
					deactivate();
				else
					activate();
			});
		});
	</script>
	

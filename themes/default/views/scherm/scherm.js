// Generated by CoffeeScript 1.6.3
(function() {
  var control, each, linear_partition, max, min, test,
    _this = this;

  window.Photo = (function() {
    function Photo(el) {
      this.el = el;
      this.img = this.el.querySelector('img');
      this.width = this.img.width;
      this.height = this.img.height;
      
      this.img.setAttribute('width', '100%');
      this.img.setAttribute('height', '');
      this.aspect_ratio = this.width / this.height;
    }

    Photo.prototype.caption = function() {
      return this.el.querySelector('figcaption').innerHTML;
    };

    Photo.prototype.resize = function(dimensions) {
      this.el.style.width = "" + dimensions.width + "px";
      return this.el.style.height = "" + dimensions.height + "px";
    };

    return Photo;

  })();

  window.order_photos = function(photos, viewport_width, ideal_height) {
    var index, partition, row_buffer, rows, summed_width, weights;
    summed_width = photos.reduce((function(sum, p) {
      return sum += p.aspect_ratio * ideal_height;
    }), 0);
    rows = Math.round(summed_width / viewport_width);
    console.assert(!isNaN(summed_width), 'summed_width is a real value');
    console.assert(!isNaN(rows), 'rows is a real value');
    if (rows < 1) {
      return photos.forEach(function(photo) {
        return photo.resize({
          width: parseInt(ideal_height * photo.aspect_ratio),
          height: ideal_height
        });
      });
    } else {
      weights = photos.map(function(p) {
        return parseInt(p.aspect_ratio * 100);
      });
      partition = linear_partition(weights, rows);
      index = 0;
      row_buffer = [];
      return partition.forEach(function(row) {
        var summed_ratios;
        row_buffer = [];
        row.forEach(function() {
          return row_buffer.push(photos[index++]);
        });
        summed_ratios = row_buffer.reduce((function(sum, p) {
          return sum += p.aspect_ratio;
        }), 0);
        return row_buffer.forEach(function(photo) {
          return photo.resize({
            width: parseInt(viewport_width / summed_ratios * photo.aspect_ratio),
            height: parseInt(viewport_width / summed_ratios)
          });
        });
      });
    }
  };

  each = function(obj, iterator, context) {
    return obj.forEach(iterator, context);
  };

  max = function(obj, iterator, context) {
  if (!iterator && obj[0] === +obj[0] && obj.length < 65535) {
    return Math.max.apply(Math, obj);
  }
  var result = {computed : -Infinity, value: -Infinity};
  each(obj, function(value, index, list) {
    var computed = iterator ? iterator.call(context, value, index, list) : value;
    computed > result.computed && (result = {value : value, computed : computed});
  });
  return result.value;
};

  min = function(obj, iterator, context) {
  if (!iterator && obj[0] === +obj[0] && obj.length < 65535) {
    return Math.min.apply(Math, obj);
  }
  var result = {computed : Infinity, value: Infinity};
  each(obj, function(value, index, list) {
    var computed = iterator ? iterator.call(context, value, index, list) : value;
    computed < result.computed && (result = {value : value, computed : computed});
  });
  return result.value;
};

  window.linear_partition = linear_partition = function(seq, k) {
    var ans, i, j, m, n, solution, table, x, y, _i, _j, _k, _l;
    n = seq.length;
    if (k <= 0) {
      return [];
    }
    if (k > n) {
      return seq.map(function(x) {
        return [x];
      });
    }
    table = (function() {
      var _i, _results;
      _results = [];
      for (y = _i = 0; 0 <= n ? _i < n : _i > n; y = 0 <= n ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (x = _j = 0; 0 <= k ? _j < k : _j > k; x = 0 <= k ? ++_j : --_j) {
            _results1.push(0);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    solution = (function() {
      var _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = n - 1; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = k - 1; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(0);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      table[i][0] = seq[i] + (i ? table[i - 1][0] : 0);
    }
    for (j = _j = 0; 0 <= k ? _j < k : _j > k; j = 0 <= k ? ++_j : --_j) {
      table[0][j] = seq[0];
    }
    for (i = _k = 1; 1 <= n ? _k < n : _k > n; i = 1 <= n ? ++_k : --_k) {
      for (j = _l = 1; 1 <= k ? _l < k : _l > k; j = 1 <= k ? ++_l : --_l) {
        m = min((function() {
          var _m, _results;
          _results = [];
          for (x = _m = 0; 0 <= i ? _m < i : _m > i; x = 0 <= i ? ++_m : --_m) {
            _results.push([max([table[x][j - 1], table[i][0] - table[x][0]]), x]);
          }
          return _results;
        })(), function(o) {
          return o[0];
        });
        table[i][j] = m[0];
        solution[i - 1][j - 1] = m[1];
      }
    }
    n = n - 1;
    k = k - 2;
    ans = [];
    while (k >= 0) {
      ans = [
        (function() {
          var _m, _ref, _ref1, _results;
          _results = [];
          for (i = _m = _ref = solution[n - 1][k] + 1, _ref1 = n + 1; _ref <= _ref1 ? _m < _ref1 : _m > _ref1; i = _ref <= _ref1 ? ++_m : --_m) {
            _results.push(seq[i]);
          }
          return _results;
        })()
      ].concat(ans);
      n = solution[n - 1][k];
      k = k - 1;
    }
    return [
      (function() {
        var _m, _ref, _results;
        _results = [];
        for (i = _m = 0, _ref = n + 1; 0 <= _ref ? _m < _ref : _m > _ref; i = 0 <= _ref ? ++_m : --_m) {
          _results.push(seq[i]);
        }
        return _results;
      })()
    ].concat(ans);
  };

  test = linear_partition([9, 2, 6, 3, 8, 5, 8, 1, 7, 3, 4], 3);

  control = [[9, 2, 6, 3], [8, 5, 8], [1, 7, 3, 4]];

  console.assert((JSON.stringify(test)) === (JSON.stringify(control)));

}).call(this);